"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const chain_1 = require("./chain");
const base_conf_1 = require("./base.conf");
const RNPlugin_1 = require("../plugins/RNPlugin");
const nodeExternals = require('webpack-node-externals');
const emptyObj = {};
exports.default = (appPath, mode, config) => {
    const chain = base_conf_1.default(appPath);
    const { buildAdapter = "weapp" /* WEAPP */, alias = emptyObj, entry = emptyObj, output = emptyObj, outputRoot = 'rn_temp', sourceRoot = 'src', designWidth = 750, deviceRatio, enableSourceMap = false, defineConstants = emptyObj, env = emptyObj, cssLoaderOption = emptyObj, sassLoaderOption = emptyObj, lessLoaderOption = emptyObj, stylusLoaderOption = emptyObj, mediaUrlLoaderOption = emptyObj, fontUrlLoaderOption = emptyObj, imageUrlLoaderOption = emptyObj, miniCssExtractPluginOption = emptyObj, compile = emptyObj, // 编译过程的相关配置
    postcss = emptyObj, nodeModulesPath, quickappJSON, babel, csso, uglify, commonChunks, 
    // @ts-ignore
    addChunkPages, appJson, 
    // custome plugin hooks
    modifyBuildAssets, modifyBuildTempFileContent } = config;
    let { copy } = config;
    const plugin = {};
    const minimizer = [];
    const sourceDir = path.join(appPath, sourceRoot);
    const outputDir = path.join(appPath, outputRoot);
    if (copy) {
        plugin.copyWebpackPlugin = chain_1.getCopyWebpackPlugin({ copy, appPath });
    }
    const constantsReplaceList = chain_1.mergeOption([chain_1.processEnvOption(env), defineConstants, { 'process.env.TARO_ENV': `"${buildAdapter}"` }]);
    const entryRes = chain_1.getEntry({
        sourceDir,
        entry,
        isBuildPlugin: config.isBuildPlugin
    });
    plugin.definePlugin = chain_1.getDefinePlugin([constantsReplaceList]);
    const defaultCommonChunks = !!config.isBuildPlugin
        ? ['plugin/runtime', 'plugin/vendors', 'plugin/taro', 'plugin/common']
        : ['runtime', 'vendors', 'taro', 'common'];
    let customCommonChunks = defaultCommonChunks;
    if (typeof commonChunks === 'function') {
        customCommonChunks = commonChunks(defaultCommonChunks.concat()) || defaultCommonChunks;
    }
    else if (Array.isArray(commonChunks) && commonChunks.length) {
        customCommonChunks = commonChunks;
    }
    // TODO providePlugin 验证
    plugin.providePlugin = chain_1.getProvidePlugin({
        'Taro': '@tarojs/taro-rn'
    });
    // statsPlugin
    // plugin.statsPlugin = getStatsPlugin('stats.json', {
    //   chunkModules: true
    // })
    // TODO RNPlugin
    plugin.RNPlugin = chain_1.getRNPlugin({
        sourceDir,
        outputDir,
        buildAdapter,
        constantsReplaceList,
        nodeModulesPath,
        quickappJSON,
        designWidth,
        pluginConfig: entryRes.pluginConfig,
        isBuildPlugin: !!config.isBuildPlugin,
        commonChunks: customCommonChunks,
        addChunkPages,
        alias,
        appJson,
        modifyBuildAssets,
        modifyBuildTempFileContent
    });
    plugin.miniCssExtractPlugin = chain_1.getMiniCssExtractPlugin([
        {
            filename: `[name].css`,
            chunkFilename: `[name].css`
        }, miniCssExtractPluginOption
    ]);
    const isCssoEnabled = !(csso && csso.enable === false);
    const isUglifyEnabled = !(uglify && uglify.enable === false);
    // not use
    if (mode === 'production') {
        if (isUglifyEnabled) {
            minimizer.push(chain_1.getUglifyPlugin([
                enableSourceMap,
                uglify ? uglify.config : {}
            ]));
        }
        if (isCssoEnabled) {
            const cssoConfig = csso ? csso.config : {};
            plugin.cssoWebpackPlugin = chain_1.getCssoWebpackPlugin([cssoConfig]);
        }
    }
    chain.merge({
        mode,
        devtool: chain_1.getDevtool(enableSourceMap),
        watch: mode === 'development',
        entry: entryRes.entry,
        output: chain_1.getOutput(appPath, [
            {
                outputRoot,
                publicPath: '/',
                buildAdapter,
                isBuildPlugin: config.isBuildPlugin
            }, output
        ]),
        target: RNPlugin_1.Targets[buildAdapter],
        externals: [
            // not bundle node_modules
            nodeExternals()
        ],
        resolve: { alias },
        module: chain_1.getModule(appPath, {
            sourceDir,
            entry: entryRes.entry,
            buildAdapter,
            constantsReplaceList,
            designWidth,
            deviceRatio,
            enableSourceMap,
            cssLoaderOption,
            lessLoaderOption,
            sassLoaderOption,
            stylusLoaderOption,
            fontUrlLoaderOption,
            imageUrlLoaderOption,
            mediaUrlLoaderOption,
            postcss,
            compile,
            babel,
            alias
        }),
        plugin,
        optimization: {
            minimizer,
        }
    });
    return chain;
};
