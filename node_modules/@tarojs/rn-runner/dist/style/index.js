"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const _ = require("lodash");
const chalk_1 = require("chalk");
const taro_css_to_react_native_1 = require("taro-css-to-react-native");
const StyleSheet_1 = require("./StyleSheet");
const utils_1 = require("../utils");
let globalStyleObject = {};
function getWrapedCSS(css) {
    return (`
import { StyleSheet, Dimensions } from 'react-native'

// 一般app 只有竖屏模式，所以可以只获取一次 width
const deviceWidthDp = Dimensions.get('window').width
const uiWidthPx = 375

function scalePx2dp (uiElementPx) {
  return uiElementPx * deviceWidthDp / uiWidthPx
}

export default StyleSheet.create(${css})
`);
}
function getStyleObject({ css, filePath }) {
    let styleObject = {};
    try {
        styleObject = taro_css_to_react_native_1.default(css);
    }
    catch (err) {
        utils_1.printLog("warning" /* WARNING */, 'css-to-react-native 报错', filePath);
        console.log(chalk_1.default.red(err.stack));
    }
    return styleObject;
}
function validateStyle({ styleObject, filePath }) {
    for (const name in styleObject) {
        try {
            StyleSheet_1.StyleSheetValidation.validateStyle(name, styleObject);
        }
        catch (err) {
            // 先忽略掉 scalePx2dp 的报错
            if (/Invalid prop `.*` of type `string` supplied to `.*`, expected `number`[^]*/g.test(err.message))
                return;
            utils_1.printLog("warning" /* WARNING */, '样式不支持', filePath);
            console.log(chalk_1.default.red(err.message));
        }
    }
}
function compileStyle(css, filePath) {
    const fileExt = path.extname(filePath);
    utils_1.printLog("compile" /* COMPILE */, _.camelCase(fileExt).toUpperCase(), filePath);
    // transformCSS
    let styleObject = getStyleObject({ css, filePath });
    // validate styleObject
    validateStyle({ styleObject, filePath });
    if (filePath === 'app.css') {
        globalStyleObject = styleObject;
    }
    else {
        styleObject = Object.assign(styleObject, globalStyleObject);
    }
    const styleSource = JSON.stringify(styleObject, null, 2);
    const styleSourcePx = styleSource.replace(/"(scalePx2dp\(.*?\))"/g, '$1');
    return getWrapedCSS(styleSourcePx);
}
exports.compileStyle = compileStyle;
